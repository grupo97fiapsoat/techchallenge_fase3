#!/bin/bash
# FastFood API - Docker Setup Script for WSL Ubuntu

set -e

echo "üöÄ FastFood API - Setup Script"
echo "==============================="

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
    echo "Siga as instru√ß√µes em: https://docs.docker.com/engine/install/ubuntu/"
    exit 1
fi

# Check if Docker Compose is installed
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n√£o est√° instalado. Por favor, instale o Docker Compose primeiro."
    echo "Siga as instru√ß√µes em: https://docs.docker.com/compose/install/"
    exit 1
fi

# Check if .env file exists
if [ ! -f ".env" ]; then
    echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado. Criando um com valores padr√£o..."
    cp .env .env.backup 2>/dev/null || true
    echo "‚úÖ Arquivo .env criado com sucesso!"
fi

# Check if certificates exist, if not generate them
if [ ! -f "./certs/fastfood-dev.pfx" ]; then
    echo "üîê Certificados de desenvolvimento n√£o encontrados. Gerando..."
    if command -v openssl &> /dev/null; then
        chmod +x ./scripts/generate-dev-certs.sh
        ./scripts/generate-dev-certs.sh
    else
        echo "‚ùå OpenSSL n√£o est√° instalado. Por favor, instale o OpenSSL:"
        echo "   sudo apt-get update && sudo apt-get install openssl"
        exit 1
    fi
fi

# Function to start the application
start_app() {
    echo "üîß Iniciando a aplica√ß√£o FastFood API..."
    
    # Stop any existing containers
    docker-compose down --remove-orphans
    
    # Build and start the containers
    docker-compose up --build -d
    
    echo "‚è≥ Aguardando os servi√ßos ficarem prontos..."
    
    # Wait for database to be ready
    echo "üìä Verificando se o banco de dados est√° pronto..."
    until docker-compose exec -T db /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${DB_PASSWORD:-FastFood@2024!#}" -Q "SELECT 1" &> /dev/null; do
        echo "   ‚è≥ Aguardando SQL Server..."
        sleep 5
    done
    echo "   ‚úÖ SQL Server est√° pronto!"
    
    # Wait for API to be ready
    echo "üåê Verificando se a API est√° pronta..."
    until curl -f http://localhost:5000/health &> /dev/null; do
        echo "   ‚è≥ Aguardando API..."
        sleep 5
    done
    echo "   ‚úÖ API est√° pronta!"
    
    echo ""
    echo "üéâ FastFood API est√° executando com sucesso!"
    echo ""
    echo "üìç URLs dispon√≠veis:"
    echo "   ‚Ä¢ API: http://localhost:5000"
    echo "   ‚Ä¢ Swagger: http://localhost:5000/swagger"
    echo "   ‚Ä¢ Health Check: http://localhost:5000/health"
    echo ""
    echo "üìä Banco de dados:"
    echo "   ‚Ä¢ Servidor: localhost:1433"
    echo "   ‚Ä¢ Database: FastFoodDb"
    echo "   ‚Ä¢ Usu√°rio: sa"
    echo ""
    echo "üîß Comandos √∫teis:"
    echo "   ‚Ä¢ Ver logs: docker-compose logs -f"
    echo "   ‚Ä¢ Parar: docker-compose down"
    echo "   ‚Ä¢ Restart: docker-compose restart"
    echo ""
}

# Function to stop the application
stop_app() {
    echo "üõë Parando a aplica√ß√£o FastFood API..."
    docker-compose down
    echo "‚úÖ Aplica√ß√£o parada com sucesso!"
}

# Function to show logs
show_logs() {
    echo "üìã Exibindo logs da aplica√ß√£o..."
    docker-compose logs -f
}

# Function to clean up
cleanup() {
    echo "üßπ Limpando containers e volumes..."
    docker-compose down --volumes --remove-orphans
    docker system prune -f
    echo "‚úÖ Limpeza conclu√≠da!"
}

# Function to show status
show_status() {
    echo "üìä Status dos servi√ßos:"
    docker-compose ps
}

# Main menu
case "${1:-start}" in
    "start")
        start_app
        ;;
    "stop")
        stop_app
        ;;
    "restart")
        stop_app
        start_app
        ;;
    "logs")
        show_logs
        ;;
    "status")
        show_status
        ;;
    "clean")
        cleanup
        ;;
    "help")
        echo "Uso: $0 [comando]"
        echo ""
        echo "Comandos dispon√≠veis:"
        echo "  start    - Inicia a aplica√ß√£o (padr√£o)"
        echo "  stop     - Para a aplica√ß√£o"
        echo "  restart  - Reinicia a aplica√ß√£o"
        echo "  logs     - Exibe os logs"
        echo "  status   - Mostra o status dos servi√ßos"
        echo "  clean    - Limpa containers e volumes"
        echo "  help     - Exibe esta ajuda"
        ;;
    *)
        echo "‚ùå Comando inv√°lido: $1"
        echo "Use '$0 help' para ver os comandos dispon√≠veis."
        exit 1
        ;;
esac
