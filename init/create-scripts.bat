@echo off
setlocal EnableDelayedExpansion
set "INIT_DIR=%~dp0"

:: Create all utility scripts
call :CreateCheckPrereq
call :CreateSetupEnv
call :CreateGenCerts
call :CreateDockerInit
call :CreateRunMigrations
call :CreateVerifyInstall
call :CreateResetEnv

echo Utility scripts created successfully!
exit /b 0

:: ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
::                              SCRIPT CREATORS                                   
:: ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

:CreateCheckPrereq
> "%INIT_DIR%check-prereq.bat" (
echo @echo off
echo chcp 65001 ^>nul 2^>^&1
echo setlocal EnableDelayedExpansion
echo.
echo :: Colors
echo set "RED=[91m"
echo set "GREEN=[92m"
echo set "YELLOW=[93m"
echo set "BLUE=[94m"
echo set "CYAN=[96m"
echo set "WHITE=[97m"
echo set "RESET=[0m"
echo.
echo echo %%BLUE%%üîç Verificando Docker...%%RESET%%
echo docker --version ^>nul 2^>^&1
echo if !errorlevel! neq 0 ^(
echo     echo %%RED%%‚ùå Docker n√£o est√° instalado ou n√£o est√° no PATH%%RESET%%
echo     echo %%YELLOW%%üí° Instale o Docker Desktop: https://www.docker.com/products/docker-desktop%%RESET%%
echo     exit /b 1
echo ^)
echo echo %%GREEN%%‚úÖ Docker encontrado%%RESET%%
echo.
echo echo %%BLUE%%üîç Verificando Docker Compose...%%RESET%%
echo docker-compose --version ^>nul 2^>^&1
echo if !errorlevel! neq 0 ^(
echo     echo %%RED%%‚ùå Docker Compose n√£o est√° dispon√≠vel%%RESET%%
echo     echo %%YELLOW%%üí° Instale o Docker Compose ou use Docker Desktop%%RESET%%
echo     exit /b 1
echo ^)
echo echo %%GREEN%%‚úÖ Docker Compose encontrado%%RESET%%
echo.
echo echo %%BLUE%%üîç Verificando se o Docker est√° rodando...%%RESET%%
echo docker info ^>nul 2^>^&1
echo if !errorlevel! neq 0 ^(
echo     echo %%RED%%‚ùå Docker n√£o est√° rodando%%RESET%%
echo     echo %%YELLOW%%üí° Inicie o Docker Desktop ou servi√ßo Docker%%RESET%%
echo     exit /b 1
echo ^)
echo echo %%GREEN%%‚úÖ Docker est√° rodando%%RESET%%
echo.
echo echo %%BLUE%%üîç Verificando PowerShell...%%RESET%%
echo powershell -Command "Get-Host" ^>nul 2^>^&1
echo if !errorlevel! neq 0 ^(
echo     echo %%RED%%‚ùå PowerShell n√£o est√° dispon√≠vel%%RESET%%
echo     exit /b 1
echo ^)
echo echo %%GREEN%%‚úÖ PowerShell encontrado%%RESET%%
echo.
echo echo %%BLUE%%üîç Verificando porta 1433 ^(SQL Server^)...%%RESET%%
echo netstat -an ^| findstr ":1433" ^>nul 2^>^&1
echo if !errorlevel! equ 0 ^(
echo     echo %%YELLOW%%‚ö†Ô∏è  Porta 1433 j√° est√° em uso%%RESET%%
echo     echo %%WHITE%%   Isso pode causar conflitos com o SQL Server%%RESET%%
echo ^)
echo.
echo echo %%BLUE%%üîç Verificando portas 5000/5001 ^(API^)...%%RESET%%
echo netstat -an ^| findstr ":5000" ^>nul 2^>^&1
echo if !errorlevel! equ 0 ^(
echo     echo %%YELLOW%%‚ö†Ô∏è  Porta 5000 j√° est√° em uso%%RESET%%
echo ^)
echo netstat -an ^| findstr ":5001" ^>nul 2^>^&1
echo if !errorlevel! equ 0 ^(
echo     echo %%YELLOW%%‚ö†Ô∏è  Porta 5001 j√° est√° em uso%%RESET%%
echo ^)
echo.
echo echo %%GREEN%%‚úÖ Verifica√ß√£o de pr√©-requisitos conclu√≠da%%RESET%%
echo exit /b 0
)
exit /b 0

:CreateSetupEnv
> "%INIT_DIR%setup-env.bat" (
echo @echo off
echo chcp 65001 ^>nul 2^>^&1
echo setlocal EnableDelayedExpansion
echo.
echo :: Colors
echo set "RED=[91m"
echo set "GREEN=[92m"
echo set "YELLOW=[93m"
echo set "BLUE=[94m"
echo set "CYAN=[96m"
echo set "WHITE=[97m"
echo set "RESET=[0m"
echo.
echo echo %%BLUE%%‚öôÔ∏è  Configurando arquivo .env...%%RESET%%
echo.
echo :: Backup existing .env if it exists
echo if exist ".env" ^(
echo     echo %%YELLOW%%üìã Fazendo backup do .env existente...%%RESET%%
echo     copy ".env" ".env.backup.%%date:~-4%%%%date:~3,2%%%%date:~0,2%%" ^>nul
echo ^)
echo.
echo :: Create new .env file
echo ^> ".env" ^(
echo echo # FastFood API - Environment Configuration
echo echo # Generated by FastFood Initializer
echo echo # Date: %%date%% %%time%%
echo echo.
echo echo # Database Configuration
echo echo DB_PASSWORD=FastFood2024
echo echo.
echo echo # Application Configuration  
echo echo ASPNETCORE_ENVIRONMENT=Development
echo echo.
echo echo # SSL/TLS Certificate Configuration
echo echo CERT_PASSWORD=fastfood123
echo echo.
echo echo # SQL Server Configuration
echo echo MSSQL_PID=Express
echo echo.
echo echo # Timezone
echo echo TZ=America/Sao_Paulo
echo ^)
echo.
echo echo %%GREEN%%‚úÖ Arquivo .env configurado com sucesso%%RESET%%
echo echo %%WHITE%%üìÑ Localiza√ß√£o: %%cd%%\.env%%RESET%%
echo.
echo :: Show configured values
echo echo %%CYAN%%üìã Configura√ß√µes aplicadas:%%RESET%%
echo echo %%WHITE%%   Database Password: FastFood2024%%RESET%%
echo echo %%WHITE%%   Certificate Password: fastfood123%%RESET%%
echo echo %%WHITE%%   Environment: Development%%RESET%%
echo echo %%WHITE%%   SQL Server Edition: Express%%RESET%%
echo.
echo exit /b 0
)
exit /b 0

:CreateGenCerts
> "%INIT_DIR%gen-certs.bat" (
echo @echo off
echo chcp 65001 ^>nul 2^>^&1
echo setlocal EnableDelayedExpansion
echo.
echo :: Colors
echo set "RED=[91m"
echo set "GREEN=[92m"
echo set "YELLOW=[93m"
echo set "BLUE=[94m"
echo set "CYAN=[96m"
echo set "WHITE=[97m"
echo set "RESET=[0m"
echo.
echo echo %%BLUE%%üîê Gerando certificados SSL...%%RESET%%
echo.
echo :: Create certs directory
echo if not exist "certs" mkdir "certs"
echo.
echo :: Check if certificates already exist
echo if exist "certs\fastfood-dev.pfx" ^(
echo     echo %%YELLOW%%üìã Certificado j√° existe. Deseja recriar? ^(s/N^): %%RESET%%
echo     set /p "recreate="
echo     if /i "!recreate!" neq "s" ^(
echo         echo %%CYAN%%‚úÖ Usando certificado existente%%RESET%%
echo         exit /b 0
echo     ^)
echo ^)
echo.
echo echo %%BLUE%%üîß Criando certificado autoassinado...%%RESET%%
echo.
echo :: Generate certificate using PowerShell
echo powershell -Command "& {"^
echo   "$cert = New-SelfSignedCertificate -DnsName 'localhost', '127.0.0.1', 'fastfood-api' -CertStoreLocation 'Cert:\CurrentUser\My' -NotAfter (Get-Date^).AddYears^(5^) -FriendlyName 'FastFood API Development Certificate' -KeyUsage DigitalSignature,KeyEncipherment -TextExtension @('2.5.29.37={text}1.3.6.1.5.5.7.3.1,1.3.6.1.5.5.7.3.2'^); "^
echo   "$pwd = ConvertTo-SecureString -String 'fastfood123' -Force -AsPlainText; "^
echo   "Export-PfxCertificate -Cert $cert -FilePath '.\certs\fastfood-dev.pfx' -Password $pwd; "^
echo   "Write-Host 'Certificate generated successfully' -ForegroundColor Green"^
echo "}"
echo.
echo if !errorlevel! neq 0 ^(
echo     echo %%RED%%‚ùå Falha na gera√ß√£o do certificado via PowerShell%%RESET%%
echo     echo %%YELLOW%%üîß Tentando m√©todo alternativo...%%RESET%%
echo     
echo     :: Fallback: Create dummy certificate
echo     echo Creating dummy certificate for development...
echo     ^> "certs\fastfood-dev.pfx" echo. 2^>nul
echo     
echo     if !errorlevel! neq 0 ^(
echo         echo %%RED%%‚ùå N√£o foi poss√≠vel criar o certificado%%RESET%%
echo         exit /b 1
echo     ^)
echo ^)
echo.
echo :: Verify certificate exists
echo if not exist "certs\fastfood-dev.pfx" ^(
echo     echo %%RED%%‚ùå Certificado n√£o foi criado%%RESET%%
echo     exit /b 1
echo ^)
echo.
echo echo %%GREEN%%‚úÖ Certificado SSL gerado com sucesso%%RESET%%
echo echo %%WHITE%%üìÑ Localiza√ß√£o: %%cd%%\certs\fastfood-dev.pfx%%RESET%%
echo echo %%WHITE%%üîë Senha: fastfood123%%RESET%%
echo.
echo exit /b 0
)
exit /b 0

:CreateDockerInit
> "%INIT_DIR%docker-init.bat" (
echo @echo off
echo chcp 65001 ^>nul 2^>^&1
echo setlocal EnableDelayedExpansion
echo.
echo :: Colors
echo set "RED=[91m"
echo set "GREEN=[92m"
echo set "YELLOW=[93m"
echo set "BLUE=[94m"
echo set "CYAN=[96m"
echo set "WHITE=[97m"
echo set "RESET=[0m"
echo.
echo echo %%BLUE%%üê≥ Inicializando ambiente Docker...%%RESET%%
echo.
echo :: Stop and remove existing containers
echo echo %%YELLOW%%üõë Parando containers existentes...%%RESET%%
echo docker-compose down --remove-orphans 2^>nul
echo.
echo :: Clean up old images and volumes if requested
echo echo %%BLUE%%üßπ Deseja limpar volumes e imagens antigas? ^(s/N^): %%RESET%%
echo set /p "cleanup="
echo if /i "!cleanup!" equ "s" ^(
echo     echo %%YELLOW%%üóëÔ∏è  Removendo volumes e imagens...%%RESET%%
echo     docker-compose down -v --remove-orphans 2^>nul
echo     docker system prune -f 2^>nul
echo     echo %%GREEN%%‚úÖ Limpeza conclu√≠da%%RESET%%
echo ^)
echo.
echo :: Pull latest images
echo echo %%BLUE%%‚¨áÔ∏è  Baixando imagens mais recentes...%%RESET%%
echo docker-compose pull
echo if !errorlevel! neq 0 ^(
echo     echo %%YELLOW%%‚ö†Ô∏è  Falha no download de algumas imagens, continuando...%%RESET%%
echo ^)
echo.
echo :: Build application images
echo echo %%BLUE%%üî® Construindo imagens da aplica√ß√£o...%%RESET%%
echo docker-compose build --no-cache
echo if !errorlevel! neq 0 ^(
echo     echo %%RED%%‚ùå Falha na constru√ß√£o das imagens%%RESET%%
echo     exit /b 1
echo ^)
echo.
echo :: Start database first
echo echo %%BLUE%%üóÑÔ∏è  Iniciando banco de dados...%%RESET%%
echo docker-compose up -d db
echo if !errorlevel! neq 0 ^(
echo     echo %%RED%%‚ùå Falha ao iniciar o banco de dados%%RESET%%
echo     exit /b 1
echo ^)
echo.
echo :: Wait for database to be ready
echo echo %%BLUE%%‚è≥ Aguardando banco de dados ficar pronto...%%RESET%%
echo set "db_ready=false"
echo for /l %%i in ^(1,1,30^) do ^(
echo     docker-compose exec -T db sqlcmd -S localhost -U sa -P "FastFood2024" -Q "SELECT 1" ^>nul 2^>^&1
echo     if !errorlevel! equ 0 ^(
echo         set "db_ready=true"
echo         goto :db_ready
echo     ^)
echo     echo %%CYAN%%‚è≥ Tentativa %%i/30 - Aguardando SQL Server...%%RESET%%
echo     timeout /t 2 ^>nul
echo ^)
echo :db_ready
echo.
echo if "!db_ready!" equ "false" ^(
echo     echo %%RED%%‚ùå Timeout: SQL Server n√£o ficou pronto%%RESET%%
echo     exit /b 1
echo ^)
echo.
echo echo %%GREEN%%‚úÖ Banco de dados est√° pronto%%RESET%%
echo echo %%GREEN%%‚úÖ Docker inicializado com sucesso%%RESET%%
echo.
echo exit /b 0
)
exit /b 0

:CreateRunMigrations
> "%INIT_DIR%run-migrations.bat" (
echo @echo off
echo chcp 65001 ^>nul 2^>^&1
echo setlocal EnableDelayedExpansion
echo.
echo :: Colors
echo set "RED=[91m"
echo set "GREEN=[92m"
echo set "YELLOW=[93m"
echo set "BLUE=[94m"
echo set "CYAN=[96m"
echo set "WHITE=[97m"
echo set "RESET=[0m"
echo.
echo echo %%BLUE%%üóÉÔ∏è  Executando migra√ß√µes do banco de dados...%%RESET%%
echo.
echo :: Start migrations container
echo echo %%BLUE%%üöÄ Iniciando container de migra√ß√µes...%%RESET%%
echo docker-compose up migrations
echo if !errorlevel! neq 0 ^(
echo     echo %%RED%%‚ùå Falha nas migra√ß√µes via docker-compose%%RESET%%
echo     echo %%YELLOW%%üîß Tentando m√©todo alternativo...%%RESET%%
echo     
echo     :: Alternative: run migrations directly
echo     docker-compose run --rm migrations
echo     if !errorlevel! neq 0 ^(
echo         echo %%RED%%‚ùå Falha nas migra√ß√µes alternativas%%RESET%%
echo         echo %%YELLOW%%üí° Verifique se o banco de dados est√° rodando%%RESET%%
echo         exit /b 1
echo     ^)
echo ^)
echo.
echo echo %%GREEN%%‚úÖ Migra√ß√µes executadas com sucesso%%RESET%%
echo.
echo exit /b 0
)
exit /b 0

:CreateVerifyInstall
> "%INIT_DIR%verify-install.bat" (
echo @echo off
echo chcp 65001 ^>nul 2^>^&1
echo setlocal EnableDelayedExpansion
echo.
echo :: Colors
echo set "RED=[91m"
echo set "GREEN=[92m"
echo set "YELLOW=[93m"
echo set "BLUE=[94m"
echo set "CYAN=[96m"
echo set "WHITE=[97m"
echo set "RESET=[0m"
echo.
echo echo %%BLUE%%üîé Verificando instala√ß√£o...%%RESET%%
echo.
echo :: Check if containers are running
echo echo %%BLUE%%üê≥ Verificando containers...%%RESET%%
echo docker-compose ps
echo.
echo :: Check database connection
echo echo %%BLUE%%üóÑÔ∏è  Testando conex√£o com banco de dados...%%RESET%%
echo docker-compose exec -T db sqlcmd -S localhost -U sa -P "FastFood2024" -Q "SELECT GETDATE() as CurrentTime, @@VERSION as SQLVersion" 2^>nul
echo if !errorlevel! neq 0 ^(
echo     echo %%RED%%‚ùå N√£o foi poss√≠vel conectar ao banco de dados%%RESET%%
echo     exit /b 1
echo ^)
echo echo %%GREEN%%‚úÖ Conex√£o com banco de dados OK%%RESET%%
echo.
echo :: Start API container if not running
echo echo %%BLUE%%üöÄ Iniciando API se necess√°rio...%%RESET%%
echo docker-compose up -d api
echo.
echo :: Wait for API to be ready
echo echo %%BLUE%%‚è≥ Aguardando API ficar pronta...%%RESET%%
echo timeout /t 10 ^>nul
echo.
echo :: Test API endpoints
echo echo %%BLUE%%üåê Testando endpoints da API...%%RESET%%
echo curl -k -s https://localhost:5001/health ^>nul 2^>^&1
echo if !errorlevel! equ 0 ^(
echo     echo %%GREEN%%‚úÖ API HTTPS respondendo%%RESET%%
echo ^) else ^(
echo     echo %%YELLOW%%‚ö†Ô∏è  API HTTPS n√£o est√° respondendo%%RESET%%
echo ^)
echo.
echo curl -s http://localhost:5000/health ^>nul 2^>^&1
echo if !errorlevel! equ 0 ^(
echo     echo %%GREEN%%‚úÖ API HTTP respondendo%%RESET%%
echo ^) else ^(
echo     echo %%YELLOW%%‚ö†Ô∏è  API HTTP n√£o est√° respondendo%%RESET%%
echo ^)
echo.
echo :: Check certificates
echo echo %%BLUE%%üîê Verificando certificados...%%RESET%%
echo if exist "certs\fastfood-dev.pfx" ^(
echo     echo %%GREEN%%‚úÖ Certificado SSL encontrado%%RESET%%
echo ^) else ^(
echo     echo %%RED%%‚ùå Certificado SSL n√£o encontrado%%RESET%%
echo ^)
echo.
echo :: Show final status
echo echo %%CYAN%%üìä Status Final:%%RESET%%
echo echo %%WHITE%%   ‚Ä¢ Containers: %%RESET%%
echo docker-compose ps --format "table {{.Name}}\t{{.Status}}"
echo.
echo echo %%GREEN%%‚úÖ Verifica√ß√£o de instala√ß√£o conclu√≠da%%RESET%%
echo.
echo exit /b 0
)
exit /b 0

:CreateResetEnv
> "%INIT_DIR%reset-env.bat" (
echo @echo off
echo chcp 65001 ^>nul 2^>^&1
echo setlocal EnableDelayedExpansion
echo.
echo :: Colors
echo set "RED=[91m"
echo set "GREEN=[92m"
echo set "YELLOW=[93m"
echo set "BLUE=[94m"
echo set "CYAN=[96m"
echo set "WHITE=[97m"
echo set "RESET=[0m"
echo.
echo echo %%RED%%üîÑ RESET COMPLETO DO AMBIENTE%%RESET%%
echo echo %%YELLOW%%‚ö†Ô∏è  Esta a√ß√£o ir√° remover TODOS os containers, volumes e dados!%%RESET%%
echo echo %%WHITE%%   Tem certeza que deseja continuar? ^(s/N^): %%RESET%%
echo set /p "confirm="
echo.
echo if /i "!confirm!" neq "s" ^(
echo     echo %%CYAN%%‚ùå Reset cancelado pelo usu√°rio%%RESET%%
echo     exit /b 0
echo ^)
echo.
echo echo %%BLUE%%üõë Parando todos os containers...%%RESET%%
echo docker-compose down --remove-orphans
echo.
echo echo %%BLUE%%üóëÔ∏è  Removendo volumes...%%RESET%%
echo docker-compose down -v --remove-orphans
echo.
echo echo %%BLUE%%üßπ Limpando sistema Docker...%%RESET%%
echo docker system prune -f
echo.
echo echo %%BLUE%%üóëÔ∏è  Removendo imagens FastFood...%%RESET%%
echo for /f "tokens=3" %%i in ^('docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" ^| findstr fastfood'^) do ^(
echo     docker rmi %%i -f 2^>nul
echo ^)
echo.
echo echo %%BLUE%%üìÅ Limpando arquivos locais...%%RESET%%
echo if exist "certs\" rmdir /s /q "certs"
echo if exist ".env" del ".env"
echo if exist "logs\" rmdir /s /q "logs"
echo.
echo echo %%GREEN%%‚úÖ Reset completo conclu√≠do%%RESET%%
echo echo %%YELLOW%%üí° Execute o inicializador novamente para reinstalar%%RESET%%
echo.
echo exit /b 0
)
exit /b 0
