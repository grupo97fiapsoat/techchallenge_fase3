# Sistema de Autoatendimento para Lanchonete - PRD

## 1. Visão Geral
Sistema de autoatendimento para uma lanchonete em expansão, visando melhorar a eficiência do atendimento e controle de pedidos.

## 2. Objetivos do Produto
- Automatizar o processo de pedidos
- Reduzir erros de comunicação entre cliente e cozinha
- Melhorar a experiência do cliente
- Facilitar o gerenciamento de pedidos e produtos
- Permitir o acompanhamento em tempo real dos pedidos

## 3. Funcionalidades Principais

### 3.1. Sistema de Autoatendimento (Cliente)
- Identificação do cliente:
  * Via CPF
  * Cadastro (nome e e-mail)
  * Modo anônimo

- Montagem de pedido:
  * Lanche (opcional)
  * Acompanhamento (opcional)
  * Bebida (opcional)
  * Sobremesa (opcional)
  * Exibição de nome, descrição e preço para cada item

- Pagamento:
  * Integração com Mercado Pago
  * Pagamento via QR Code

- Acompanhamento do pedido:
  * Status: Recebido
  * Status: Em preparação
  * Status: Pronto
  * Status: Finalizado
  * Notificação quando pronto para retirada

### 3.2. Sistema Administrativo
- Gerenciamento de Clientes:
  * Visualização de clientes cadastrados
  * Possibilidade de campanhas promocionais

- Gerenciamento de Produtos:
  * CRUD de produtos
  * Categorias fixas: Lanche, Acompanhamento, Bebida, Sobremesa
  * Atributos: nome, categoria, preço, descrição, imagens

- Acompanhamento de Pedidos:
  * Visualização de pedidos em andamento
  * Monitoramento de tempo de espera
  * Atualização de status dos pedidos

## 4. Requisitos Técnicos

### 4.1. Arquitetura
- Domain-Driven Design (DDD)
- Arquitetura Hexagonal
- Backend monolítico
- APIs RESTful com Swagger

### 4.2. APIs Necessárias
- Clientes:
  * POST /api/v1/customers (Cadastro)
  * GET /api/v1/customers/cpf/{cpf} (Identificação)

- Produtos:
  * POST /api/v1/products
  * PUT /api/v1/products/{id}
  * DELETE /api/v1/products/{id}
  * GET /api/v1/products/category/{category}

- Pedidos:
  * POST /api/v1/orders/checkout
  * GET /api/v1/orders

### 4.3. Infraestrutura
- 1 instância para banco de dados
- 1 instância para aplicação
- Containerização via Docker
- Docker Compose para ambiente completo

## 5. Entregáveis Fase 1

### 5.1. Documentação
- Event Storming completo
- Diagramas DDD
- Documentação da API (Swagger)
- README.md detalhado
- Vídeo demonstrativo

### 5.2. Código
- Repositório privado no GitHub
- Dockerfile configurado
- Docker Compose
- Implementação das APIs especificadas
- Banco de dados configurado

## 6. Fluxos Principais

### 6.1. Fluxo de Pedido
1. Cliente acessa o sistema
2. Opcional: Identificação do cliente
3. Seleção dos produtos
4. Revisão do pedido
5. Pagamento via QR Code
6. Confirmação do pedido
7. Acompanhamento do status

### 6.2. Fluxo de Preparação
1. Cozinha recebe o pedido
2. Atualização para "Em preparação"
3. Preparo dos itens
4. Atualização para "Pronto"
5. Notificação do cliente
6. Entrega do pedido
7. Atualização para "Finalizado"

## 7. Restrições e Limitações
- Frontend não será desenvolvido nesta fase
- Foco total no backend
- Checkout simplificado (fake checkout)
